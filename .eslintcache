[{"/Users/roshy/Documents/projects/visualisation/my-app/src/index.js":"1","/Users/roshy/Documents/projects/visualisation/my-app/src/canvasjs.react.js":"2","/Users/roshy/Documents/projects/visualisation/my-app/src/canvasjs.min.js":"3"},{"size":8740,"mtime":1613245529456,"results":"4","hashOfConfig":"5"},{"size":2080,"mtime":1613221499248,"results":"6","hashOfConfig":"5"},{"size":479523,"mtime":1613221499185,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10","usedDeprecatedRules":"11"},"1ivyz4m",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"14","usedDeprecatedRules":"11"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"/Users/roshy/Documents/projects/visualisation/my-app/src/index.js",["18","19","20","21"],"import React from 'react';\nimport axios from 'axios';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Helmet from 'react-helmet'\nimport CanvasJSReact from './canvasjs.react';\n\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nfunction ButtonReset(props) {\n  return  (<a key=\"reset\" className=\"resetButton\" href=\"#\" onClick={props.onClick}>\n  Reset Priority \n</a>)\n}\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        range: {\n          lowRange: new Date(2016, 0, 25, 18, 31),\n          highRange: new Date(2016, 0, 26, 0, 0) // highRange: new Date(2016, 0, 27, 17, 0)\n\n        },\n        data: [\n          {        \n            type: \"line\",\n            name: \"1A11\",\n            showInLegend: true,\n            dataPoints:  [\n              { label: \"BRIGHTN\", y: (new Date(2016, 0, 25, 18, 30)).getTime() },\n              { label: \"PRSP\", y: (new Date(2016, 0, 26, 12, 1)).getTime() },\n              { label: \"HYWRDS\", y: (new Date(2016, 0, 26, 3, 3)).getTime(), markerColor: \"red\", markerType: \"circle\", markerSize: 20 },\n              { label: \"HSSKS\", y: (new Date(2016, 0, 26, 6, 1)).getTime() },\n              { label: \"BLCMB\", y: (new Date(2016, 0, 26, 9, 1)).getTime() },\n              { label: \"THBRDGS\", y: (new Date(2016, 0, 26, 14, 1)).getTime() },\n              { label: \"GTWCK\", y: (new Date(2016, 0, 26, 17, 0)).getTime() },\n              { label: \"HRLEY\", y: (new Date(2016, 0, 26, 20, 1)).getTime() },\n              { label: \"ECRYDN\", y: (new Date(2016, 0, 26, 23, 2)).getTime() }\n            ]\n          },\n          {        \n            type: \"line\",\n            name: \"3L44\",\n            showInLegend: true,\n            dataPoints:  [\n              { label: \"BRIGHTN\", y: (new Date(2016, 0, 25, 22, 30)).getTime() },\n              { label: \"PRSP\", y: (new Date(2016, 0, 26, 13, 1)).getTime() },\n              { label: \"HYWRDS\", y: (new Date(2016, 0, 26, 3, 3)).getTime(),markerColor: \"red\", markerType: \"circle\", markerSize: 20 },\n              { label: \"GTWCK\", y: (new Date(2016, 0, 26, 14, 0)).getTime() },\n              { label: \"ECRYDN\", y: (new Date(2016, 0, 26, 17, 0)).getTime() }  \n            ]\n          }\n        ]\n      }\n  }\n\n  render() {\n    \n    console.log('they rendered me again!')\n    const options = {\n      title:{\n        text: \"Train Graph\"\n      },\n\n      axisY: {\n        title: \"Time\",\n        minimum: this.state.range.lowRange.getTime() + (200 * 60000), //(new Date(2016, 0, 25, 17, 30)).getTime(),    \n        maximum: this.state.range.highRange.getTime() - (60 * 60000), // need to add mire buffer here    \n        labelFormatter: function(e){\n          return CanvasJS.formatDate(e.value, \"DD-MMM hh:mm TT\");\n        }\n      },\n      axisX:{\n        title: \"Tiplocs\",\n        gridThickness: 2\n      },\n      data: this.state.data\n    }\n\n   return (\n     <div>\n       <CanvasJSChart options={options}\n       onRef = {ref => this.chart = ref}\n       />\n      <NavigationUp onClick={() => this.loadMoreDataTwo(2)} />\n     </div>\n   )\n  }\n\n  loadMoreDataTwo(hours) {\n    const low = this.state.range.lowRange;\n    const high = this.state.range.highRange;\n\n    const shifted_low = new Date(low.setHours(low.getHours()+hours))\n    const shifted_high = new Date(high.setHours(high.getHours()+hours))\n\n    this.setState({\n      ...this.state,\n      range: {\n        lowRange: shifted_low,\n        highRange: shifted_high\n      }\n    })\n\n    console.log(JSON.stringify(this.state.range.lowRange.getTime()))\n  }\n\n  loadMoreData(hours) {\n\n    const low = this.state.range.lowRange;\n    const high = this.state.range.highRange;\n\n    const shifted_low = low.setHours(low.getHours()+hours)\n    const shifted_high = high.setHours(high.getHours()+hours)\n\n    console.log('shifted low: ' + new Date(shifted_low))\n    console.log('shifted high: ' + new Date(shifted_high))\n\n    const trains = this.state.data\n\n    const new_train_set = []\n    trains.forEach((train) => {\n      const new_train = {\n        type: train.type,\n        name: train.name,\n        showInLegend: train.showInLegend,\n        dataPoints: []\n      }\n\n      new_train.dataPoints.push(train.dataPoints.filter((trainStop) => {\n        if (trainStop.y > low && trainStop.y <= high) {\n          trainStop.y = new Date(trainStop.y).toTimeString()\n          return trainStop\n        } else {\n          console.log('out of range')\n        }\n      }));\n\n      new_train_set.push(new_train)\n    })\n\n    console.log(\"hi: \" + JSON.stringify(new_train_set))\n    this.setState(new_train_set)\n  }\n}\n\nconst NavigationUp = (props) => {\n  return (\n    <button onClick={props.onClick}>+ 2 hours</button>\n  )\n}\n\n\nclass Application extends React.Component {\n  render () {\n    return (\n        <div className=\"application\"> \n            <Helmet>\n                <style>{'body { background-color: black; }'}</style>\n            </Helmet>\n\n            <Graph/>\n        </div>\n    );\n  }\n};\n\n\nclass ConflictTable extends React.Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        alternatives: [],\n        problemStatement: [],\n        journeyDetails: [],\n        collisionMetaData: {}\n      }\n\n  }\n\n  componentDidMount() {\n    \n    axios.get(`http://127.0.0.1:5000/?panel=6`)\n      .then(res => {\n        const alternatives = res.data.alternatives;\n        const problemStatement = res.data.problem_statement;\n        const journeyDetails = res.data.problem_statement.journey_details;\n        const collisionMetaData = res.data.collison_metadata;\n        // console.log(journeyDetails)\n        this.setState({ \n            problemStatement: problemStatement,\n            alternatives: alternatives,\n            journeyDetails: journeyDetails,\n            collisionMetaData: collisionMetaData,\n          });\n      })\n  }\n\n  render() {\n    return (\n        <div>\n          <h2>Panel: 6</h2>\n          <h3>Problem </h3>\n          <h4> <ul> Trains {JSON.stringify(this.state.collisionMetaData.trains)} near {this.state.collisionMetaData.closest_tiploc} share routes {JSON.stringify(this.state.collisionMetaData.shared_routes)} 12:03:00 </ul></h4>\n          <h3>Solutions</h3>\n          <ul>\n            { this.state.alternatives.map(alt => <li key={alt.alternative_id}><p>Preference {alt.alternative_preference} is {alt.Solution.metadata.methodology} {alt.Solution.journey_details[0].headcode} saving {alt.Solution.metadata.savedTime}</p></li>)}\n          </ul>\n        </div>\n      )\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stepNumber: 0,\n      isConflict: false,\n    };\n  }\n\n  handleToggleClick(i) {\n    console.log(this.state.isConflict)\n\n    if (this.state.isConflict) {\n      \n      this.setState({\n        isConflict: false,\n      });\n    } else {\n\n      this.setState({\n        isConflict: true,\n        collisionMeta: \n        [\n          {\n            headcode: \"1A11\",\n            path: \"M 10 10 l 90 0 l 90 60 l 90 0\",\n            hash: \"1000\",\n            line_stroke: \"#FF0099\",\n            userSelected: false,\n          },\n          {\n            headcode: \"2A22\",\n            path: \"M 10 70 l 300 0\",\n            hash: \"2000\",\n            line_stroke: \"#E6FB04\",\n            userSelected: false,\n          }\n        ]\n      });\n\n    }\n  }\n\n  renderConflictState = (isConflictState) => {\n    let c = []\n    if (isConflictState) {\n\n      // have any of the options been pressed, if so only render those. if not render all visuals for all lines\n      const trainPreference = this.isAnyPreferenceSelected();\n\n      if (trainPreference != null)  {\n        const x = []\n        x.push(trainPreference)\n        console.log('selected collision is: ' + JSON.stringify(x));\n        c.push(this.createVisualsForCollisions(x))\n        c.push(this.createButtonsForCollisions(this.state.collisionMeta, this.priorityClick))\n\n      } else {\n        c.push(this.createVisualsForCollisions(this.state.collisionMeta))\n        c.push(this.createButtonsForCollisions(this.state.collisionMeta, this.priorityClick))\n      }\n\n      // always allow the reset option\n      c.push(<ButtonReset key=\"reset\" onClick={() => this.resetButtonForCollisions()}/>)\n      return c;\n    }\n  }\n\n  render() {\n\n      return (\n        <div className=\"game\">\n\n          {/* <div className=\"toggle\">\n              <Detection onClick={i => this.handleToggleClick(i)} />\n            </div>\n\n          <div className=\"path\">\n            <Routes />\n          </div> */}\n\n          {this.renderConflictState(this.state.isConflict)}\n        </div>\n      );\n  }\n}\n  \n  // ========================================\n  \nReactDOM.render(<Application />, document.getElementById(\"root\"));\n",["22","23"],"/Users/roshy/Documents/projects/visualisation/my-app/src/canvasjs.react.js",["24"],"﻿/*\r\nCanvasJS React Charts - https://canvasjs.com/\r\nCopyright 2021 fenopix\r\n\r\n--------------------- License Information --------------------\r\nCanvasJS is a commercial product which requires purchase of license. Without a commercial license you can use it for evaluation purposes for upto 30 days. Please refer to the following link for further details.\r\nhttps://canvasjs.com/license/\r\n\r\n*/\r\nvar React = require('react');\r\nvar CanvasJS = require('./canvasjs.min');\r\nCanvasJS = CanvasJS.Chart ? CanvasJS : window.CanvasJS;\r\n\r\nclass CanvasJSChart extends React.Component {\r\n\tstatic _cjsContainerId = 0\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.options = props.options ? props.options : {};\r\n\t\tthis.containerProps = props.containerProps ? props.containerProps : { width: \"100%\", position: \"relative\" };\r\n\t\tthis.containerProps.height = props.containerProps && props.containerProps.height ? props.containerProps.height : this.options.height ? this.options.height + \"px\" : \"400px\";\r\n\t\tthis.chartContainerId = \"canvasjs-react-chart-container-\" + CanvasJSChart._cjsContainerId++;\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\t//Create Chart and Render\t\t\r\n\t\tthis.chart = new CanvasJS.Chart(this.chartContainerId, this.options);\r\n\t\tthis.chart.render();\r\n\r\n\t\tif (this.props.onRef)\r\n\t\t\tthis.props.onRef(this.chart);\r\n\t}\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\t//Check if Chart-options has changed and determine if component has to be updated\r\n\t\treturn !(nextProps.options === this.options);\r\n\t}\r\n\tcomponentDidUpdate() {\r\n\t\t//Update Chart Options & Render\r\n\t\tthis.chart.options = this.props.options;\r\n\t\tthis.chart.render();\r\n\t}\r\n\tcomponentWillUnmount() {\r\n\t\t//Destroy chart and remove reference\r\n\t\tthis.chart.destroy();\r\n\t\tif (this.props.onRef)\r\n\t\t\tthis.props.onRef(undefined);\r\n\t}\r\n\trender() {\r\n\t\t//return React.createElement('div', { id: this.chartContainerId, style: this.containerProps });\t\t\r\n\t\treturn <div id={this.chartContainerId} style={this.containerProps} />\r\n\t}\r\n}\r\n\r\nvar CanvasJSReact = {\r\n\tCanvasJSChart: CanvasJSChart,\r\n\tCanvasJS: CanvasJS\r\n};\r\n\r\nexport default CanvasJSReact;","/Users/roshy/Documents/projects/visualisation/my-app/src/canvasjs.min.js",[],["25","26"],{"ruleId":"27","severity":1,"message":"28","line":12,"column":12,"nodeType":"29","endLine":12,"endColumn":84},{"ruleId":"30","severity":1,"message":"31","line":132,"column":69,"nodeType":"32","messageId":"33","endLine":132,"endColumn":71},{"ruleId":"34","severity":1,"message":"35","line":171,"column":7,"nodeType":"36","messageId":"37","endLine":171,"endColumn":20},{"ruleId":"34","severity":1,"message":"38","line":216,"column":7,"nodeType":"36","messageId":"37","endLine":216,"endColumn":11},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":1,"column":1,"nodeType":"45","messageId":"46","fix":"47"},{"ruleId":"39","replacedBy":"48"},{"ruleId":"41","replacedBy":"49"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'ConflictTable' is defined but never used.","Identifier","unusedVar","'Game' is defined but never used.","no-native-reassign",["50"],"no-negated-in-lhs",["51"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"52","text":"53"},["50"],["51"],"no-global-assign","no-unsafe-negation",[-1,0],""]