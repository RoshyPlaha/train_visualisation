[{"/Users/roshy/Documents/projects/visualisation/my-app/src/index.js":"1"},{"size":7129,"mtime":1609604064311,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1ivyz4m","/Users/roshy/Documents/projects/visualisation/my-app/src/index.js",["7","8","9","10","11","12"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SVG from 'react-svg-draw'\nimport './index.css';\nimport Helmet from 'react-helmet'\n\nfunction Detection(props) {\n  return (\n    <button className=\"triggerButton\" onClick={props.onClick}> Simulate Conflict\n    </button>\n  )\n}\n\nfunction ButtonReset(props) {\n  return  (<a key=\"reset\" className=\"resetButton\" href=\"#\" onClick={props.onClick}>\n  Reset Priority \n</a>)\n}\n\nfunction ButtonPriority(props) {\n  console.log(\"this is colour \" + props.colour)\n  return <a key={props.headcode} href=\"#\" className=\"priorityButton\" onClick={props.onClick} style={{\"background-color\":\"black\"}, {\"color\": props.colour}} > <span>Prioritise {props.headcode} </span></a>\n}\n\nconst Routes = ({}) => (\n    <SVG height=\"1000\" width=\"2000\">\n      <path className=\"path\" d=\"M 10 10 l 90 0 l 90 60\" fill=\"transparent\" stroke=\"red\" pathLength=\"1\"/>\n      <path className=\"path\" d=\"M 70 10 l 240 0\" stroke=\"black\" fill=\"transparent\" stroke=\"red\" pathLength=\"1\"/>\n      <path className=\"path\" d=\"M 10 70 l 300 0\" stroke=\"black\" fill=\"transparent\" stroke=\"red\" pathLength=\"1\"/>\n    </SVG>\n);\n\nconst Collision = ({ collision_path, line_stroke }) => (\n\n    <div>\n      <SVG height=\"210\" width=\"500\">\n\n      <svg viewBox=\"0 0 400 400\">\n      <defs>\n          <filter id=\"red-glow\" filterUnits=\"userSpaceOnUse\"\n                  x=\"-50%\" y=\"-50%\" width=\"200%\" height=\"200%\">\n            {/* <!-- blur the text at different levels--> */}\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"5\" result=\"blur5\"/>\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"10\" result=\"blur10\"/>\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"20\" result=\"blur20\"/>\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"30\" result=\"blur30\"/>\n            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"50\" result=\"blur50\"/>\n\n            <feMerge result=\"blur-merged\">\n              <feMergeNode in=\"blur10\"/>\n              <feMergeNode in=\"blur20\"/>\n              <feMergeNode in=\"blur30\"/>\n              <feMergeNode in=\"blur50\"/>\n            </feMerge>\n            {/* <!-- recolour the merged blurs red--> */}\n            <feColorMatrix result=\"red-blur\" in=\"blur-merged\" type=\"matrix\"\n                          values=\"1 0 0 0 0\n                                  0 0.06 0 0 0\n                                  0 0 0.44 0 0\n                                  0 0 0 1 0\" />\n            <feMerge>\n              <feMergeNode in=\"red-blur\"/>       \n              <feMergeNode in=\"blur5\"/>         \n              <feMergeNode in=\"SourceGraphic\"/>\n            </feMerge>\n          </filter>\n        </defs>\n        </svg>\n        <path className=\"collision\" d={collision_path} fill=\"transparent\" stroke={line_stroke} pathLength=\"1\"/>\n      </SVG>\n  </div>\n);\n \n\nclass Application extends React.Component {\n  render () {\n    return (\n        <div className=\"application\"> \n            <Helmet>\n                <style>{'body { background-color: black; }'}</style>\n            </Helmet>\n            <Game/>\n        </div>\n    );\n  }\n};\n  \nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stepNumber: 0,\n      isConflict: false,\n    };\n  }\n\n  handleToggleClick(i) {\n    console.log(this.state.isConflict)\n\n    if (this.state.isConflict) {\n      \n      this.setState({\n        isConflict: false,\n      });\n    } else {\n\n      this.setState({\n        isConflict: true,\n        collisionMeta: \n        [\n          {\n            headcode: \"1A11\",\n            path: \"M 10 10 l 90 0 l 90 60 l 90 0\",\n            hash: \"1000\",\n            line_stroke: \"#FF0099\",\n            userSelected: false,\n          },\n          {\n            headcode: \"2A22\",\n            path: \"M 10 70 l 300 0\",\n            hash: \"2000\",\n            line_stroke: \"#E6FB04\",\n            userSelected: false,\n          }\n        ]\n      });\n\n    }\n  }\n\n  priorityClick(headcode) {\n    let expandedState = { ...this.state };\n    console.log('clicked ' + JSON.stringify(expandedState));\n\n\n    expandedState.collisionMeta.forEach((collision) => {\n      console.log(headcode + ' ' + collision.headcode)\n      if (collision.headcode === headcode) {\n        collision.userSelected = true\n      } else {\n        collision.userSelected = false\n      }\n    })\n\n\n    this.setState({\n      ...expandedState,\n      isConflict: true,\n    })\n\n    console.log('new state: ' + this.state)\n\n  }\n\n  createVisualsForCollisions = (collisions) => {\n\n    return collisions.map((collision) => {\n      return (\n      <div key={collision.hash} className=\"collision\">\n        <Collision key={collision.hash} collision_path={collision.path} line_stroke={collision.line_stroke} train={collision.headcode} collision_hash={collision.hash}/>\n      </div>)\n    })\n  }\n\n  isAnyPreferenceSelected = () => {\n    \n    let selected_train_collision;\n    this.state.collisionMeta.forEach((collision) => {\n      if (collision.userSelected) {\n        console.log('found a match: ' + collision.headcode)\n        selected_train_collision =  collision;\n      }\n    });\n\n    return selected_train_collision;\n  }\n\n  createButtonsForCollisions = (collisions) => {\n\n    let collisionButton =  collisions.map((collision) => {\n      return (\n       <ButtonPriority key={collision.headcode} headcode={collision.headcode} colour={collision.line_stroke} onClick={() => this.priorityClick(collision.headcode)} />\n      )\n    });\n\n    return collisionButton;\n  }\n\n  resetButtonForCollisions = () => {\n    const expandedState = {...this.state};\n\n    expandedState.collisionMeta.forEach((collision) => {\n      collision.userSelected = false;\n    });\n\n    this.setState({\n      ...expandedState,\n      isConflict: true,\n    })\n  }\n\n  renderConflictState = (isConflictState) => {\n    let c = []\n    if (isConflictState) {\n\n      // have any of the options been pressed, if so only render those. if not render all visuals for all lines\n      const trainPreference = this.isAnyPreferenceSelected();\n\n      if (trainPreference != null)  {\n        const x = []\n        x.push(trainPreference)\n        console.log('selected collision is: ' + JSON.stringify(x));\n        c.push(this.createVisualsForCollisions(x))\n        c.push(this.createButtonsForCollisions(this.state.collisionMeta, this.priorityClick))\n\n      } else {\n        c.push(this.createVisualsForCollisions(this.state.collisionMeta))\n        c.push(this.createButtonsForCollisions(this.state.collisionMeta, this.priorityClick))\n      }\n\n      // always allow the reset option\n      c.push(<ButtonReset key=\"reset\" onClick={() => this.resetButtonForCollisions()}/>)\n      return c;\n    }\n  }\n\n  render() {\n\n      return (\n        <div className=\"game\">\n\n          <div className=\"toggle\">\n              <Detection onClick={i => this.handleToggleClick(i)} />\n            </div>\n\n          <div className=\"path\">\n            <Routes />\n          </div>\n\n          {this.renderConflictState(this.state.isConflict)}\n        </div>\n      );\n  }\n}\n  \n  // ========================================\n  \nReactDOM.render(<Application />, document.getElementById(\"root\"));\n",{"ruleId":"13","severity":1,"message":"14","line":15,"column":12,"nodeType":"15","endLine":15,"endColumn":84},{"ruleId":"13","severity":1,"message":"14","line":22,"column":10,"nodeType":"15","endLine":22,"endColumn":157},{"ruleId":"16","severity":1,"message":"17","line":22,"column":129,"nodeType":"18","messageId":"19","endLine":22,"endColumn":130},{"ruleId":"20","severity":1,"message":"21","line":25,"column":17,"nodeType":"22","messageId":"23","endLine":25,"endColumn":19},{"ruleId":"24","severity":1,"message":"25","line":28,"column":84,"nodeType":"26","endLine":28,"endColumn":96},{"ruleId":"24","severity":1,"message":"25","line":29,"column":84,"nodeType":"26","endLine":29,"endColumn":96},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute"]